# -*- coding: utf-8 -*-
"""Вопрос2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fE8ES3zVJc_ky3NbveJmZZY-V3WmfpLu
"""

import math
from abc import ABC, abstractmethod
from typing import Union

class Shape(ABC):


    @abstractmethod
    def area(self) -> float:
        "СДЕЗЬ ПРОИСХДЯТ ВЫЧЕСЛЕНИЯ, НЕ МЕШАТЬ"
        pass

    @abstractmethod
    def is_valid(self) -> bool:
        "Тут происходит проверка на возможно сущ-фигуры"
        pass

class Circle(Shape):
    """Класс для представления круга"""

    def __init__(self, radius: float):
        self.radius = radius

    def area(self) -> float:
        """Вычисляет площадь круга"""
        if not self.is_valid():
            raise ValueError("Некорректный радиус круга")
        return math.pi * self.radius ** 2

    def is_valid(self) -> bool:
        """Проверяет, что радиус не отриц-ный"""
        return self.radius > 0

class Triangle(Shape):
    """Класс для представления треугольника"""

    def __init__(self, side_a: float, side_b: float, side_c: float):
        self.side_a = side_a
        self.side_b = side_b
        self.side_c = side_c

    def area(self) -> float:
        "ХЗ, инете мне подсказал использовать формулу Геона"
        if not self.is_valid():
            raise ValueError("Треугольник с такими сторонами не существует")

        # Полупериметр
        p = (self.side_a + self.side_b + self.side_c) / 2

        # Формула Герона
        return math.sqrt(p * (p - self.side_a) * (p - self.side_b) * (p - self.side_c))

    def is_valid(self) -> bool:
        "Проверка на неравенство треугольника"
        sides = [self.side_a, self.side_b, self.side_c]

        # Все стороны должны быть положительными
        if any(side <= 0 for side in sides):
            return False

        # Проверка неравенства треугольника
        return (self.side_a + self.side_b > self.side_c and
                self.side_a + self.side_c > self.side_b and
                self.side_b + self.side_c > self.side_a)

    def is_right_triangle(self, tolerance: float = 1e-10) -> bool:
        "Проверяет, у треугольника стоит на 18:15"
        if not self.is_valid():
            return False

        sides = sorted([self.side_a, self.side_b, self.side_c])

        # Теоремка Пифагора
        return abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < tolerance

class Rectangle(Shape):
    "Добавления новой фигуры - прямоугольника"

    def __init__(self, width: float, height: float):
        self.width = width
        self.height = height

    def area(self) -> float:
        if not self.is_valid():
            raise ValueError("Некорректные размеры прямоугольника")
        return self.width * self.height

    def is_valid(self) -> bool:
        return self.width > 0 and self.height > 0

def calculate_area(shape: Shape) -> float:
    """Вычисляет площадь фигуры без знания её типа в compile-time"""
    return shape.area()

# Фабричные функции для удобства
def create_circle(radius: float) -> Circle:
    return Circle(radius)

def create_triangle(side_a: float, side_b: float, side_c: float) -> Triangle:
    return Triangle(side_a, side_b, side_c)

def create_rectangle(width: float, height: float) -> Rectangle:
    return Rectangle(width, height)

if __name__ == "__main__":
    # БаZовая фигура
    circle = create_circle(5)
    triangle = create_triangle(3, 4, 5)
    rectangle = create_rectangle(4, 6)

    # Вычисление площадей
    print(f"Площадь круга с радиусом 5: {calculate_area(circle):.2f}")
    print(f"Площадь треугольника со сторонами 3,4,5: {calculate_area(triangle):.2f}")
    print(f"Площадь прямоугольника 4x6: {calculate_area(rectangle):.2f}")

    # Проверка на прямоугольный треугольник
    print(f"Треугольник 3,4,5 прямоугольный: {triangle.is_right_triangle()}")

    # Демонстрация полиморфизма
    shapes = [circle, triangle, rectangle]
    total_area = sum(calculate_area(shape) for shape in shapes)
    print(f"Общая площадь всех фигур: {total_area:.2f}")

